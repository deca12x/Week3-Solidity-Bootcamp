/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TokenSale,
  TokenSaleInterface,
} from "../../../contracts/TokenSale.sol/TokenSale";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_ratio",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
      {
        internalType: "contract IMyToken",
        name: "_tokenContract",
        type: "address",
      },
      {
        internalType: "contract IMyNFT",
        name: "_nftContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "buyNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "buyTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "nftContract",
    outputs: [
      {
        internalType: "contract IMyNFT",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ratio",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "returnTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenContract",
    outputs: [
      {
        internalType: "contract IMyToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000f3b38038062000f3b8339818101604052810190620000379190620002bb565b620000576200004b620000f160201b60201c565b620000f960201b60201c565b836001819055508260028190555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506200032d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b620001d781620001c2565b8114620001e357600080fd5b50565b600081519050620001f781620001cc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022a82620001fd565b9050919050565b60006200023e826200021d565b9050919050565b620002508162000231565b81146200025c57600080fd5b50565b600081519050620002708162000245565b92915050565b600062000283826200021d565b9050919050565b620002958162000276565b8114620002a157600080fd5b50565b600081519050620002b5816200028a565b92915050565b60008060008060808587031215620002d857620002d7620001bd565b5b6000620002e887828801620001e6565b9450506020620002fb87828801620001e6565b93505060406200030e878288016200025f565b92505060606200032187828801620002a4565b91505092959194509250565b610bfe806200033d6000396000f3fe6080604052600436106100915760003560e01c80638da5cb5b116100595780638da5cb5b14610155578063a035b1fe14610180578063d0febe4c146101ab578063d56d229d146101b5578063f2fde38b146101e057610091565b80633ae1786f1461009657806351ed8288146100bf57806355a373d6146100e8578063715018a61461011357806371ca337d1461012a575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610761565b610209565b005b3480156100cb57600080fd5b506100e660048036038101906100e19190610761565b6102ef565b005b3480156100f457600080fd5b506100fd610426565b60405161010a919061080d565b60405180910390f35b34801561011f57600080fd5b5061012861044c565b005b34801561013657600080fd5b5061013f610460565b60405161014c9190610837565b60405180910390f35b34801561016157600080fd5b5061016a610466565b6040516101779190610873565b60405180910390f35b34801561018c57600080fd5b5061019561048f565b6040516101a29190610837565b60405180910390f35b6101b3610495565b005b3480156101c157600080fd5b506101ca610533565b6040516101d791906108af565b60405180910390f35b3480156101ec57600080fd5b50610207600480360381019061020291906108f6565b610559565b005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679033836040518363ffffffff1660e01b8152600401610266929190610923565b600060405180830381600087803b15801561028057600080fd5b505af1158015610294573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc600154836102c091906109aa565b9081150290604051600060405180830381858888f193505050501580156102eb573d6000803e3d6000fd5b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306002546040518463ffffffff1660e01b8152600401610350939291906109db565b6020604051808303816000875af115801561036f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103939190610a4a565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a144819433836040518363ffffffff1660e01b81526004016103f1929190610923565b600060405180830381600087803b15801561040b57600080fd5b505af115801561041f573d6000803e3d6000fd5b5050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104546105dc565b61045e600061065a565b565b60015481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60025481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933600154346104e29190610a77565b6040518363ffffffff1660e01b81526004016104ff929190610923565b600060405180830381600087803b15801561051957600080fd5b505af115801561052d573d6000803e3d6000fd5b50505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105616105dc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c790610b3c565b60405180910390fd5b6105d98161065a565b50565b6105e461071e565b73ffffffffffffffffffffffffffffffffffffffff16610602610466565b73ffffffffffffffffffffffffffffffffffffffff1614610658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064f90610ba8565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b61073e8161072b565b811461074957600080fd5b50565b60008135905061075b81610735565b92915050565b60006020828403121561077757610776610726565b5b60006107858482850161074c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006107d36107ce6107c98461078e565b6107ae565b61078e565b9050919050565b60006107e5826107b8565b9050919050565b60006107f7826107da565b9050919050565b610807816107ec565b82525050565b600060208201905061082260008301846107fe565b92915050565b6108318161072b565b82525050565b600060208201905061084c6000830184610828565b92915050565b600061085d8261078e565b9050919050565b61086d81610852565b82525050565b60006020820190506108886000830184610864565b92915050565b6000610899826107da565b9050919050565b6108a98161088e565b82525050565b60006020820190506108c460008301846108a0565b92915050565b6108d381610852565b81146108de57600080fd5b50565b6000813590506108f0816108ca565b92915050565b60006020828403121561090c5761090b610726565b5b600061091a848285016108e1565b91505092915050565b60006040820190506109386000830185610864565b6109456020830184610828565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109b58261072b565b91506109c08361072b565b9250826109d0576109cf61094c565b5b828204905092915050565b60006060820190506109f06000830186610864565b6109fd6020830185610864565b610a0a6040830184610828565b949350505050565b60008115159050919050565b610a2781610a12565b8114610a3257600080fd5b50565b600081519050610a4481610a1e565b92915050565b600060208284031215610a6057610a5f610726565b5b6000610a6e84828501610a35565b91505092915050565b6000610a828261072b565b9150610a8d8361072b565b9250828202610a9b8161072b565b91508282048414831517610ab257610ab161097b565b5b5092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610b26602683610ab9565b9150610b3182610aca565b604082019050919050565b60006020820190508181036000830152610b5581610b19565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610b92602083610ab9565b9150610b9d82610b5c565b602082019050919050565b60006020820190508181036000830152610bc181610b85565b905091905056fea2646970667358221220159169f35d77ee19cc373273819e46c3cac12c307d9aca6b09871d3187070c8a64736f6c63430008130033";

type TokenSaleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenSaleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenSale__factory extends ContractFactory {
  constructor(...args: TokenSaleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _ratio: BigNumberish,
    _price: BigNumberish,
    _tokenContract: AddressLike,
    _nftContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _ratio,
      _price,
      _tokenContract,
      _nftContract,
      overrides || {}
    );
  }
  override deploy(
    _ratio: BigNumberish,
    _price: BigNumberish,
    _tokenContract: AddressLike,
    _nftContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _ratio,
      _price,
      _tokenContract,
      _nftContract,
      overrides || {}
    ) as Promise<
      TokenSale & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TokenSale__factory {
    return super.connect(runner) as TokenSale__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenSaleInterface {
    return new Interface(_abi) as TokenSaleInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TokenSale {
    return new Contract(address, _abi, runner) as unknown as TokenSale;
  }
}
